var searchIndex = {};
searchIndex['coyoneda'] = {"items":[[0,"","coyoneda","# Functor composition via the Co-Yoneda Lemma",null,null],[3,"Coyoneda","","",null,null],[11,"unwrap","","",0,null],[11,"fmap","","",0,{"inputs":[{"name":"coyoneda"},{"name":"f"}],"output":{"name":"coyoneda"}}],[11,"from","","",0,{"inputs":[{"name":"coyoneda"},{"name":"t"}],"output":{"name":"coyoneda"}}],[11,"transform","","",0,{"inputs":[{"name":"coyoneda"}],"output":{"name":"coyoneda"}}]],"paths":[[3,"Coyoneda"]]};
searchIndex['morphism'] = {"items":[[0,"","morphism","This crate provides a structure for suspended closure composition.\nComposition is delayed and executed in a loop when a `Morphism` is\napplied to an argument.",null,null],[3,"Morphism","","A suspended chain of closures that behave as a function from type\n`A` to type `B`.",null,null],[11,"new","","Create the identity chain.",0,{"inputs":[{"name":"morphism"}],"output":{"name":"morphism"}}],[11,"unsafe_push_front","","",0,null],[11,"head","","Attach a closure to the front of the closure chain. This corresponds to\nclosure composition at the domain (pre-composition).",0,{"inputs":[{"name":"morphism"},{"name":"f"}],"output":{"name":"morphism"}}],[11,"push_front","","Mutate a given `Morphism<B, C>` by pushing a closure of type\n`Fn(B) -> B` onto the front of the chain.",0,null],[11,"unsafe_push_back","","",0,null],[11,"tail","","Attach a closure to the back of the closure chain. This corresponds to\nclosure composition at the codomain (post-composition).",0,{"inputs":[{"name":"morphism"},{"name":"f"}],"output":{"name":"morphism"}}],[11,"push_back","","Mutate a given `Morphism<A, B>` by pushing a closure of type\n`Fn(B) -> B` onto the back of the chain.",0,null],[11,"then","","Compose one `Morphism` with another.",0,{"inputs":[{"name":"morphism"},{"name":"morphism"}],"output":{"name":"morphism"}}],[11,"run","","Given an argument, run the chain of closures in a loop and return the\nfinal result.",0,{"inputs":[{"name":"morphism"},{"name":"a"}],"output":{"name":"b"}}]],"paths":[[3,"Morphism"]]};
searchIndex['functor'] = {"items":[[0,"","functor","",null,null],[0,"isomorphism","","",null,null],[8,"Iso","functor::isomorphism","",null,null],[10,"to","","",0,{"inputs":[{"name":"iso"},{"name":"a"}],"output":{"name":"b"}}],[10,"from","","",0,{"inputs":[{"name":"iso"},{"name":"b"}],"output":{"name":"a"}}],[8,"IsoOnce","","",null,null],[10,"to_once","","",1,{"inputs":[{"name":"isoonce"},{"name":"a"}],"output":{"name":"b"}}],[10,"from_once","","",1,{"inputs":[{"name":"isoonce"},{"name":"b"}],"output":{"name":"a"}}],[0,"parametric","functor","",null,null],[8,"Param","functor::parametric","",null,null],[16,"Param","","",2,null],[8,"ReParam","","",null,null],[16,"Output","","",3,null],[8,"Covariant","functor","",null,null],[10,"fmap","","",4,{"inputs":[{"name":"covariant"},{"name":"f"}],"output":{"name":"output"}}],[8,"CovariantOnce","","",null,null],[10,"fmap_once","","",5,{"inputs":[{"name":"covariantonce"},{"name":"f"}],"output":{"name":"output"}}],[8,"Contravariant","","",null,null],[10,"contramap","","",6,{"inputs":[{"name":"contravariant"},{"name":"f"}],"output":{"name":"output"}}],[8,"ContravariantOnce","","",null,null],[10,"contramap_once","","",7,{"inputs":[{"name":"contravariantonce"},{"name":"f"}],"output":{"name":"output"}}],[8,"Invariant","","",null,null],[10,"invmap","","",8,{"inputs":[{"name":"invariant"},{"name":"f"}],"output":{"name":"output"}}],[8,"InvariantOnce","","",null,null],[10,"invmap_once","","",9,{"inputs":[{"name":"invariantonce"},{"name":"f"}],"output":{"name":"output"}}],[8,"Bivariant","","",null,null],[10,"xmap","","",10,{"inputs":[{"name":"bivariant"}],"output":{"name":"output"}}],[8,"NaturalTransform","","",null,null],[10,"transform","","",11,{"inputs":[{"name":"naturaltransform"}],"output":{"name":"t"}}],[11,"fmap","core::option","",12,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"output"}}],[11,"fmap_once","","",12,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"output"}}],[11,"fmap","alloc::boxed","",13,{"inputs":[{"name":"box"},{"name":"f"}],"output":{"name":"output"}}],[11,"fmap_once","","",13,{"inputs":[{"name":"box"},{"name":"f"}],"output":{"name":"output"}}],[11,"fmap","core::result","",14,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"output"}}],[11,"fmap_once","","",14,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"output"}}],[11,"xmap","core::marker","",15,{"inputs":[{"name":"phantomdata"}],"output":{"name":"output"}}],[11,"transform","alloc::boxed","",13,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"transform","core::result","",14,{"inputs":[{"name":"result"}],"output":{"name":"option"}}]],"paths":[[8,"Iso"],[8,"IsoOnce"],[8,"Param"],[8,"ReParam"],[8,"Covariant"],[8,"CovariantOnce"],[8,"Contravariant"],[8,"ContravariantOnce"],[8,"Invariant"],[8,"InvariantOnce"],[8,"Bivariant"],[8,"NaturalTransform"],[4,"Option"],[3,"Box"],[4,"Result"],[3,"PhantomData"]]};
initSearch(searchIndex);
